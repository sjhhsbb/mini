<style>
  .news-box-wormworld {
    background-color: #ffffff;
    padding: 10px;
    border: 2px solid #ff0000;
    border-radius: 5px;
    margin-bottom: 10px;
    width: 100%;
    height: 86%;
    position: relative;
    z-index: 1;
    overflow-y: scroll;
  }

  .news-box-wormworld .news-content {
    width: 100%;
    height: 85%;
    overflow-y: auto;
    padding: 10px;
    border: 1px solid #eb0000;
    box-sizing: border-box;
  }

  .news-box-wormworld .news-button {
    position: absolute;
    bottom: 20px;
    display: flex;
    align-items: center;
    gap: 5px;
    width: 100%;
  }

  .news-box-wormworld .close-button {
    position: absolute;
    right: 33px;
    background-color: #f44336;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 12px;
    top: -24px;
    width: 100px;
    height: 50px;
  }

  #idwormworld a {
    color: #fff;
  }

  .wwc-joystick div {
    min-width: 100px;
    display: inline-block;
  }

  #game-wrap #game-cont #stretch-box #main-menu-view .line-bottom #mm-wwc {
    background-color: #ff2020;
    color: #fff;
    overflow: hidden;
    height: 50px;
    line-height: 50px;
    font-size: 20px;
    padding: 0 10px;
    box-sizing: border-box;
    border-radius: 5px;
    border: 0;
    outline: 0;
    box-shadow: 0 1px 1px 0 rgb(0 0 0 / 20%);
    text-align: center;
    text-shadow: 0 0 1px #000;
    cursor: pointer;
    transition: background-color 0.5s ease;
    min-width: 120px;
    display: inline-block;
    margin: 0 3px;
  }

  .group-tab-button {
    display: flex;
    margin-top: 7px;
  }

  .tab-button {
    cursor: pointer;
    padding: 5px 15px;
    background-color: #eee;
    border: 1px solid #ccc;
    border-radius: 5px 5px 0 0;
  }

  .tab-button:hover {
    background-color: #000;
    color: #fff;
  }

  .tab-button.active {
    background-color: #fff;
    color: #ff0000;
  }

  .tab-content {
    display: none;
    padding: 5px 10px 0 10px;
    border-radius: 0 0 5px 5px;
  }

  .active-tab {
    display: block;
  }

  .sub-title {
    font-size: 14px;
    font-weight: bold;
    display: block;
    color: rgb(0, 0, 0);
    border-bottom: 1px solid;
    margin: 10px 0;
  }

  #idReplaceSkin button {
    font-size: small;
    padding: 5px 15px;
    z-index: 1;
    position: absolute;
    background-color: transparent;
    color: #FFF;
    border: 1px solid #eb991c;
    border-radius: 15px;
  }

  #idReplaceSkin button:hover {
    background-color: #eb991c;
    color: #000;
    border: 1px solid #cfcfcf;
  }
</style>

<div style="position: relative">
  <button style="background-color: #ff2020; color: #fff; border: none; float: right" id="mm-wwc-close">
    CLOSE
  </button>
  <div style="margin-bottom: 10px">
    ID: <input type="text" value="gg_116152060195741273040" style="width: 190px" id="wormate_id" />
    <button onclick="navigator.clipboard.writeText('gg_116152060195741273040')">COPY</button>
  </div>
  
    
      <form name="formSkin" method="POST" enctype="multipart/form-data">
        FILE.json:
        <input id="fileSkin" type="file" accept="application/json" />
      </form>
      
        <div class="page-set-worm-world">
          <div class="group-tab-button">
            <div id="tab_b1" class="tab-button active" onclick="changeTab(0)">
              SET
            </div>
            <div id="tab_b3" class="tab-button" onclick="changeTab(2)">Account</div>
            <div id="tab_b4" class="tab-button" onclick="changeTab(3)">HELP</div>
            <div id="tab_b5" class="tab-button" onclick="changeTab(4)">CUSTOM</div>
            <div id="tab_b6" class="tab-button" onclick="changeTab(5)">SET ZOOM</div>
            <div id="tab_b7" class="tab-button" onclick="changeTab(6)">SKIN SWAP</div>
            <div id="tab_b8" class="tab-button" onclick="changeTab(7)">JOYSTICK</div>
          </div>

          <div id="tab1" class="tab-content active-tab">
            
              <div style="display: flex">
    <div style="width: 33%">
        <label>SAVE Kill:</label>
        <input type="checkbox" id="saveGame" />
    </div>
    <div style="width: 33%">
        <label>Background:</label>
        <select id="backgroundArena"></select>
    </div>

    <div style="width: 34%">
        <label>Replace SKIN:</label>
        <input style="width: 60px" type="text" name="inputReplaceSkin" id="inputReplaceSkin" value="35" maxlength="4"
            onchange="setIdReplaceSkin(this)" />
    </div>
</div>
<div style="display: grid;
          grid-template-columns: repeat(3, 1fr);
          grid-template-rows: 1fr;
          grid-column-gap: 0px;
          grid-row-gap: 0px;
          margin-top: 10px;">
    <div>
        <label>TOP HS ("9")</label>
        <input type="checkbox" id="showTophs" />
    </div>
    <div>
        <label>Record HS ("0")</label>
        <input type="checkbox" id="showRechs" />
    </div>
    <div>
        <label>3 TOP SCORE</label>
        <input type="checkbox" id="onlytop" />
    </div>
</div>
<div style="display: grid;
          grid-template-columns: repeat(2, 1fr);
          grid-template-rows: 1fr;
          grid-column-gap: 0px;
          grid-row-gap: 0px;
          margin-top: 10px;">
    <div>
        <label>MODO STREAMER:</label>
        <input type="checkbox" id="modoSTREAMER" /> - <a href="https://wormworld.io/customizer"> USE CUSTOM
            FILE</a>
    </div>
</div>
<div style="margin-bottom: 5px">
    <strong class="sub-title">Joystick Settings</strong>
    <div class="wwc-joystick">
        <div>
            <label style="display: block">Active</label>
            <input type="checkbox" id="joystick_checked" onclick="setconfigjoystick_checked(this)" />
        </div>
        <div>
            <label style="display: block">Color</label>
            <select id="joystick_color" onchange="setconfigjoystick_color(this)">
                <option value="red">RED</option>
                <option value="blue">BLUE</option>
                <option value="white">WHITE</option>
                <option value="black">Black</option>
            </select>
        </div>
        <div>
            <label style="display: block">Mode</label>
            <select id="joystick_mode" onchange="setconfigjoystick_mode(this)">
                <option value="dynamic">Dynamic</option>
                <option value="static">Static</option>
            </select>
        </div>
        <div>
            <label style="display: block">Position</label>
            <select id="joystick_position" onchange="setconfigjoystick_position(this)">
                <option value="R">Right</option>
                <option value="L">Left</option>
            </select>
        </div>
        <div>
            <label style="display: block">Size</label>
            <select id="joystick_size" onchange="setconfigjoystick_size(this)">
                <option value="110">110</option>
                <option value="100">100</option>
                <option value="90">90</option>
                <option value="80">80</option>
                <option value="75">75</option>
                <option value="70">70</option>
            </select>
        </div>
    </div>
</div>
<strong class="sub-title">Plus</strong>
<div style="
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          grid-template-rows: 1fr;
          grid-column-gap: 0px;
          grid-row-gap: 0px;
          margin-top: 10px;
        ">
    <div>
        <label>Bad Language</label>
        <input type="checkbox" id="activeBadLang" />
        <!--
                    <select id="badlanguage" onchange="setbadLanguageList(this)">
                      <option value="0">None</option>
                      <option value="1">Active</option>
                      <option value="ar">Arabic</option>
                      <option value="en">English</option>
                      <option value="es">Spanish</option>
                      <option value="pt">Português</option>
                      <option value="id">Indonesia</option>
                      <option value="vn">Vietnamese</option> -->
        </select>
    </div>
    <div>
        <label>SOUNDS:</label>
        <input type="checkbox" id="activeSounds" />
    </div>
</div>
                
          </div>
          <div id="tab2" class="tab-content">
            em construção
          </div>
          <div id="tab3" class="tab-content">
            <style>
  .tabLabel {
    display: block;
    font-size: 12px;
  }
</style>
<div>
  <div style="margin: 10px 0;border-bottom: 1px  solid #CCC;padding-bottom: 5px;">
    <button id="toShareRank" onclick="toShareRank()">To Share in data e Rank</button>
  </div>
  <div style="margin: 10px 0;border-bottom: 1px  solid #CCC;padding-bottom: 5px;">
    The data is updated manually only due to data sharing regulations.
    <div style="margin: 10px 0;">
      <button id="btnGenerateToken" type="button" onclick="onOpen()"
        style="width: 100%;background-color: #54fd36;padding: 6px;font-size: 20px;">
        Open Account
      </button>
    </div>
  </div>
  <br />
  <div style="margin-top: 5px;">
    <div style="display: flex;gap: 10px;justify-content: space-between;align-items: center;">
      <div>
        <label for="sharedLocation">CONNECT IN</label>
        <input type="text" placeholder="ROOM CODE" id="roomCode" name="roomCode" />
        <div style="display: flex;justify-content: space-between;gap: 5px;margin: 5px 0;">
          <button style="width: 100%;" onclick="setRoomCode(true)">CONNECT</button>
          <button style="width: 100%;" onclick="setRoomCode(false)">DISCONNECT</button>
        </div>
      </div>
      
        <div>
          <label for="sharedLocation">MY ROOM</label>
          <input type="text" readonly id="code" name="code" value="" />
          <div style="display: flex;justify-content: space-between;gap: 5px;margin: 5px 0;">
            <button style="width: 100%;" id="btnGenNew" onclick="createRoom()">CREATE ROOM</button>
            <button style="width: 100%;" id="btnCopyToken" onclick="copyToken()">Copy</button>
          </div>
        </div>
        
    </div>
  </div>
</div>
<script>
  const serverGame = JSON.parse(localStorage.getItem("serverGame") || "{}");
  const url_token = "https://wormworld.io/extension";
  var token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb2RpZ28iOiJnZ18xMTYxNTIwNjAxOTU3NDEyNzMwNDAiLCJzdGF0dXMiOnRydWUsImlhdCI6MTc2MDM2Nzc2NiwiZXhwIjoxNzYwMzc0OTY2fQ.o7mbqU8pIXwdmxDs1IOJw5GW08-_bCUpLoIlNVaA1es";
  var idwormate = "gg_116152060195741273040";


  (async function () {
    //conferir se existe document.getElementById("code")
    if (document.getElementById("code")) {
      document.getElementById("code").value = serverGame.code || "";
    }
    document.getElementById("roomCode").value = serverGame.roomCode || "";
    _wwcio.player.teamRoom = serverGame.roomCode || "";

    console.log(_wwcio.player);
  })();

  function copyToken(e) {
    const copyText = document.getElementById("code");
    copyText.select();
    copyText.setSelectionRange(0, 99999);
    document.execCommand("copy");
    alert("Copied the text: " + copyText.value);
  }

  function onOpen() {
    var newWindow = window.open("", "_blank");
    onGenerateToken(function () {
      newWindow.location.href = "https://wormworld.io/admin?page=login&token=" + token;
    });
  }

  function createRoom() {
    const oldCode = document.getElementById("code").value;
    serverGame.code = window.gerarCodigoUnico();
    document.getElementById("code").value = serverGame.code;
    serverGame.roomCode = serverGame.code;
    localStorage.setItem("serverGame", JSON.stringify(serverGame));
    alert("Room created successfully!");
  }

  function setRoomCode(connect) {
    try {

      serverGame.roomCode = connect ? document.getElementById("roomCode").value : "";
      _wwcio.player.teamRoom = serverGame.roomCode;
      localStorage.setItem("serverGame", JSON.stringify(serverGame));
      alert("Room " + (connect ? "connected" : "disconnected") + " successfully!");

    } catch (e) {
      console.log(e);
    }
  }

  function onChangeCode() {
    serverGame.code = document.getElementById("code").value;
    localStorage.setItem("serverGame", JSON.stringify(serverGame));
  }

  function onGenerateToken(fn) {
    const element = document.getElementById("myToken");
    fetch(url_token + "/account/gen", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        tk: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb2RpZ28iOiJnZ18xMTYxNTIwNjAxOTU3NDEyNzMwNDAiLCJzdGF0dXMiOnRydWUsImlhdCI6MTc2MDM2Nzc2NiwiZXhwIjoxNzYwMzc0OTY2fQ.o7mbqU8pIXwdmxDs1IOJw5GW08-_bCUpLoIlNVaA1es",
        wuid: bbs.wuid,
      }),
    }).then(async function (response) {
      const json = await response.json();
      // console.log(json);
      token = json.tk;
      if (fn) {
        fn();
      }
    });
  }

  function toShareRank() {
    if (!confirm("Are you sure you want to share your rank?")) {
      return;
    }
    const url_token = "https://gateway.wormate.io/pub/wuid/" + bbs.wuid + "/consent/change?value=true";

    fetch(url_token).then(async function (response) {
      alert("To Share Rank Success!");
      window.location.reload();
    });
  }
</script>
          </div>
          <div id="tab4" class="tab-content">
            
              <strong class="sub-title">KEYBOARD</strong>
<div style="padding: 5px; margin-top: 5px; border: #eb991c 1px solid; display: flex;">
  <ul>
    <li>0 - SHOW/HIDE RECORD HS</li>
    <li>1 - SKIN REPLACE</li>
    <li>9 - SHOW/HIDE TOP HS</li>
    <li>8 - AUTOMATIC LOOP</li>
    <li>7 - AUTOMATIC SPIRAL</li>
    <li>6 - SHOW/HIDE NAMES TOP(1 SEG RUN)</li>
  </ul>
  <ul>
    <li>5 - RESPAWN</li>
    <li>4 - LASER</li>
    <li>3 - BACKGROUND</li>
    <li>
      <|, - ZOOM(+ 0.25)</li>
    <li>>|. - ZOOM(- 0.25)</li>
    <li>Z = ZOOM(1)</li>
    <li>C = CLOSE-UP(0.5)</li>
  </ul>
</div>
                
          </div>
          <div id="tab5" class="tab-content">
            
              <div style="display:flex; gap: 15px;">
  <div>
    <strong class="sub-title">LASER</strong>
    <input type="checkbox" id="laser" name="laser" value="laser" checked>
    <!-- input para selecionar cor -->
    <input type="color" id="color" name="color" value="#ff0000">
    <!-- input para selecionar espessura 0.3 a 1 -->
    <input type="range" id="range" name="range" min="0.1" max="1" step="0.1" value="0.1">
    <!-- valor range-->
    <span id="range-value">0.1</span>
  </div>
  <div>
    <strong class="sub-title">ENEMY NAME COLOR</strong>
    <!-- input para selecionar cor -->
    <input type="color" id="enemyNameColor" name="enemyNameColor" value="#ff0000">
    <!-- input para selecionar font-size -->
    <input type="number" id="enemyNameFontSize" name="enemyNameFontSize" min="14" max="28" step="1" value="14">
  </div>
</div>
<strong class="sub-title">CUSTOMIZE</strong>
<button id="TestAUDIO" onclick="testAudio()">Test AUDIO</button>
<button id="clearBackground" onclick="clearBackground()">Clear WALLPAPERS</button>
<button id="clearPosition" onclick="clearMapPosition()">Clear Map Position</button>
<button id="clearClock" onclick="clearClock()">Clear Map Clock</button>
<button id="clearJoyStick" onclick="clearJoyStick()">Clear Joy Stick</button>
<button id="clearBgGame" onclick="clearBgGame()">Clear Bg GAME</button>

<script>

  const range = document.getElementById('range');
  const rangeValue = document.getElementById('range-value');
  const color = document.getElementById('color');
  const laserActive = document.getElementById('laser');
  const enemyNameColor = document.getElementById('enemyNameColor');
  const enemyNameFontSize = document.getElementById('enemyNameFontSize');

  range.value = bbs.laser || 0.1;
  rangeValue.textContent = bbs.laser || 0.1;
  color.value = bbs.laserColor || 0xff0000;
  laserActive.checked = bbs.laserActive || false;
  enemyNameColor.value = bbs.enemyNameColor;
  enemyNameFontSize.value = bbs.enemyNameFontSize || 14;

  range.addEventListener('input', (e) => {
    const value = parseFloat(e.target.value).toFixed(1);
    rangeValue.textContent = value;
    bbs.laser = value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  });

  color.addEventListener('input', (e) => {
    const colorValue = e.target.value;
    bbs.laserColor = colorValue;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    console.log(`Selected color: ${colorValue}`);
  });

  laserActive.addEventListener('change', (e) => {
    bbs.laserActive = e.target.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  });

  enemyNameColor.addEventListener('input', (e) => {
    const colorValue = e.target.value;
    bbs.enemyNameColor = colorValue;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    console.log(`Selected color: ${colorValue}`);
  });

  enemyNameFontSize.addEventListener('input', (e) => {
    const fontSizeValue = e.target.value;
    bbs.enemyNameFontSize = parseInt(fontSizeValue, 10);
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    console.log(`Selected font size: ${fontSizeValue}`);
  });

  function testAudio() {
    testAudioCustom();
  }

  function clearBackground() {
    bbs.backgroundUri = null;
    bbs.background = 0;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("Clear Background");
  }


  function clearMapPosition() {
    bbs.display.clock = { x: 60, y: 60, Tg: null };
    bbs.display.top = { x: 225, y: 1 };
    bbs.display.custom = false;
    bbs.displayFriends = {
      x: -10,
      y: 315,
      rotation: 0,
    }
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("Clear Map Position");
    window.location.reload();
  }

  function clearClock() {
    bbs.display.customClock = null;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("CLOCK MAP UPDATE OK!");
    window.location.reload();
  }

  function clearJoyStick() {
    bbs.customJoystick = null;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("JOYSTICK MAP UPDATE OK!");
    window.location.reload();
  }

  function clearBgGame() {
    bbs.background = null;
    bbs.backgroundIsCustom = false;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("BG GAME CLEAR OK!");
    window.location.reload();
  }


</script>
                
          </div>
          <div id="tab6" class="tab-content">

            <style>
  .set-zoom-wwc {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(3, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 0px;
    margin-top: 10px;
  }

  .szwwc-item {
    grid-column: 1 / 3;
  }

  .szwwc-item label {
    display: block;
  }

  .szwwc-item div {
    display: flex;
    align-items: center;
  }

  .szwwc-item input[type="range"] {
    flex: 1;
    width: 90%;
  }
</style>
<div class="set-zoom-wwc">
  <div>
    <label>Zoom PC</label>
    <input type="checkbox" id="activeZoom" />
  </div>
  <div>
    <label>Zoom Mobile</label>
    <input type="checkbox" id="activeZoomMobile" />
  </div>
  <div class="szwwc-item">
    <label>Zoom Limit Down</label>
    <div>
      <input type="range" id="limitDown" min="0.25" max="2" step="0.25" />
      <span id="limitDownValue"></span>
    </div>
  </div>
  <div class="szwwc-item">
    <label>Zoom +|- step (CAUTION)</label>
    <div>
      <input type="range" id="step" min="0.25" max="2" step="0.25" />
      <span id="stepValue"></span>
    </div>
  </div>
  <div class="szwwc-item">
    <label>Zoom Keyboard (c or C)</label>
    <div>
      <input type="range" id="closeUp" min="0.25" max="2" step="0.25" />
      <span id="closeUpValue"></span>
    </div>
  </div>
  <div class="szwwc-item">
    <label>Zoom Keyboard (z or Z)</label>
    <div>
      <input type="range" id="closeDown" min="0.25" max="2" step="0.25" />
      <span id="closeDownValue"></span>
    </div>
  </div>
</div>

<script>
  // Define valores padrões ou carregue de localStorage se disponível
  const configZoom = bbs.configZoom || {
    limitDown: 0.25,
    step: 0.25,
    closeUp: 0.5,
    closeDown: 1,
  };

  // Atualiza os controles deslizantes e os spans de exibição
  $("#limitDown").val(configZoom.limitDown);
  $("#step").val(configZoom.step);
  $("#closeUp").val(configZoom.closeUp);
  $("#closeDown").val(configZoom.closeDown);

  // Atualiza os spans com os valores atuais
  $("#limitDownValue").text(configZoom.limitDown);
  $("#stepValue").text(configZoom.step);
  $("#closeUpValue").text(configZoom.closeUp);
  $("#closeDownValue").text(configZoom.closeDown);

  // Função para salvar e atualizar o objeto bbs.configZoom no localStorage
  function updateConfigZoom() {
    bbs.configZoom = {
      limitDown: parseFloat($("#limitDown").val()),
      step: parseFloat($("#step").val()),
      closeUp: parseFloat($("#closeUp").val()),
      closeDown: parseFloat($("#closeDown").val()),
    };
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  }

  // Atualiza as exibições ao mudar os valores
  $("#limitDown").on("input", function () {
    $("#limitDownValue").text(this.value);
    updateConfigZoom();
  });

  $("#step").on("input", function () {
    $("#stepValue").text(this.value);
    updateConfigZoom();
  });

  $("#closeUp").on("input", function () {
    $("#closeUpValue").text(this.value);
    updateConfigZoom();
  });

  $("#closeDown").on("input", function () {
    $("#closeDownValue").text(this.value);
    updateConfigZoom();
  });

  // Configuração dos checkboxes
  $("#activeZoom").attr("checked", bbs.activeZoom);

  if (false) {
    bbs.activeZoom = false;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  }

  $("#activeZoom").change(function () {
    if (false) {
      bbs.activeZoom = false;
    } else {
      bbs.activeZoom = this.checked;
    }
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  $("#activeZoomMobile").attr("checked", bbs.activeZoomMobile);
  $("#activeZoomMobile").change(function () {
    bbs.activeZoomMobile = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  // // Inicializa os valores salvos em localStorage se existirem
  // const savedGame = localStorage.getItem("wwcSaveGame");
  // if (savedGame) {
  //   bbs = JSON.parse(savedGame);
  // }
</script>

          </div>
          <div id="tab7" class="tab-content">
            
              <style>
  .container-tab7 {}
</style>
<div class="container-tab7">
  <h3>SKINS SELECTEDS</h3>
  <ul id="myListSkin"></ul>
  <hr />
  <button id="cleanTheSkinShed" onclick="initTab7()">Reload LIST</button>
  <button id="cleanTheSkinShed" onclick="cleanTheSkinShed()">Clean LIST</button>
</div>
<script>
  const initTab7 = () => {
    const myListSkin = document.getElementById("myListSkin");
    bbs.cambiar = bbs.cambiar || {};
    if(Object.keys(bbs.cambiar).length === 0){
      myListSkin.innerHTML = "<li>Empty</li>";
      return;
    }
    myListSkin.innerHTML = "";
    for (const key in bbs.cambiar) {
      const li = document.createElement("li");
      li.innerHTML = bbs.cambiar[key];
      myListSkin.appendChild(li);
    }
  }

  function cleanTheSkinShed() {
    bbs.cambiar = {};
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    alert("Clean the skin shed.");
    initTab7();
  }

  initTab7();
</script>
                
          </div>
          <div id="tab8" class="tab-content">
            
              <style>
    .game-area {
        border: 1px solid #CCC;
    }

    .menu-bar {
        width: 100%;
        display: flex;
        gap: 10px;
        justify-content: center;
        align-content: flex-start;
        align-items: flex-start;
    }

    .slider-container-01 {
        width: 95%;
        height: 110px;
        background: #eee;
        display: flex;
        align-content: center;
        justify-content: center;
        align-items: center;
    }

    .slider-container-02 {
        width: 5%;
        display: flex;
        justify-content: center;
    }

    .slider-container-02 input[type="range"] {
        transform: rotate(270deg);
    }
</style>
<div style="padding: 0 0 5px 0;border-bottom: 1px solid #CCC;margin: 0 0 5px 0;">
    <div style="display: flex;">
        <div>
            <label>Type Button Zoom</label>
            <select id="joystickSelectTypeCurrent" name="joystickSelectTypeCurrent">
                <option value="btn">BUTTON</option>
                <option value="range">RANGE</option>
            </select>
        </div> &nbsp; | &nbsp;
        <div>
            <label>Type Name</label>
            <select id="joystickSelectTypeName" name="joystickSelectTypeCurrentName">
                <option value="all">all</option>
                <option value="abb">abbreviated</option>
            </select>
        </div>
    </div>
    <div id="joystickButtons" style="display: flex;margin: 5px 0;justify-content: space-between;">
    </div>
</div>
PREVIEW
<div class="game-area">
    <div class="menu-bar"></div>
    <div style="display: flex;">
        <div class="slider-container-01">
            TOUCH DIRECTIONAL
        </div>
        <div class="slider-container-02">
            <input id="sliderZoom" type="range" min="0.25" max="2" step="0.25" value="1" style="width: 90px;">
        </div>
    </div>
</div>
<hr>
<div>
    <button id="joystickCleanConfig">CLEAN CONFIG</button>
</div>
<script>
    const btn = "btn_";

    document.getElementById("joystickCleanConfig").addEventListener("click", () => {
        if(!confirm("Do you want to clean the configuration?")) return;
        bbs.configJoystick = null
        localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
        location.reload();
    });

    const initTab8 = () => {

        document.querySelector(".menu-bar").innerHTML = "";
        document.getElementById("joystickButtons").innerHTML = "";

        Object.keys(bbs.configJoystick.buttons).forEach((key) => {

            const button = bbs.configJoystick.buttons[key];
            const buttonElement = document.createElement("button");
            buttonElement.innerHTML = bbs.configJoystick.typeCurrentName === 'all' ? button.label : button.labelAbbreviation;
            buttonElement.id = btn + key;
            buttonElement.disabled = !button.active;
            document.querySelector(".menu-bar").appendChild(buttonElement);

            const checkebox = document.createElement("input");
            checkebox.type = "checkbox";
            checkebox.id = btn + key + "check";
            checkebox.checked = button.active;
            checkebox.addEventListener("change", (event) => {
                bbs.configJoystick.buttons[key].active = event.target.checked;
                localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
                document.getElementById(btn + key).disabled = !event.target.checked;
            });

            // Criar o label
            const label = document.createElement("label");
            label.htmlFor = checkebox.id; // Associar o label ao checkbox
            label.textContent = button.label; // Texto do label (personalize conforme necessário)

            // Adicionar checkbox e label ao contêiner
            const container = document.getElementById("joystickButtons");
            label.prepend(checkebox);
            container.appendChild(label);
        });

        const joystickSelect = document.getElementById("joystickSelectTypeCurrent");
        joystickSelect.value = bbs.configJoystick.typeCurrent;

        joystickSelect.addEventListener("change", (event) => {
            bbs.configJoystick.typeCurrent = event.target.value;
            localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
            initTab8();
        });

        const joystickSelectName = document.getElementById("joystickSelectTypeName");
        joystickSelectName.value = bbs.configJoystick.typeCurrentName;

        joystickSelectName.addEventListener("change", (event) => {
            bbs.configJoystick.typeCurrentName = event.target.value;
            localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
            initTab8();
        });

        const sliderZoom = document.getElementById("sliderZoom");
        if (joystickSelect.value === "btn") {
            //desabilitar o sliderZoom
            sliderZoom.disabled = true;
            document.getElementById(btn + "zoomplus").disabled = false;
            document.getElementById(btn + "zoomminus").disabled = false;
        } else {
            //habilitar o sliderZoom
            sliderZoom.disabled = false;
            document.getElementById(btn + "zoomplus").disabled = true;
            document.getElementById(btn + "zoomminus").disabled = true;
        }


    }
    initTab8();
</script>
                
          </div>
        </div>
        
          
</div>
<script>
  function changeTab(tabIndex) {
    const tabButtons = document.querySelectorAll(".tab-button");
    for (let i = 0; i < tabButtons.length; i++) {
      tabButtons[i].classList.remove("active");
    }
    const selectedButton = document.getElementById(`tab_b${tabIndex + 1}`);
    selectedButton.classList.add("active");

    const tabContents = document.querySelectorAll(".tab-content");
    for (let i = 0; i < tabContents.length; i++) {
      tabContents[i].classList.remove("active-tab");
    }
    const selectedTab = document.getElementById(`tab${tabIndex + 1}`);
    selectedTab.classList.add("active-tab");
  }
</script>
<script>
  if (false) {
    function _0x5d83(){const _0x206afa=['prototype','key','77ZtDLrZ','click','includes','return\x20(function()\x20','__proto__','9iCzcDS','3174892TttXOR','console','{}.constructor(\x22return\x20this\x22)(\x20)','1261272KMMZqr','opacity','warn','style','1318701xpEzMU','constructor','5bzjkOa','bind','2554388YgJKyP','log','5574462mflStJ','2182920EZdGNs','(((.+)+)+)+$','getElementById','search','apply','error','stopPropagation','1202714pzPFzR','pointerEvents','length','2hiYRgI','trace','toString','0.5'];_0x5d83=function(){return _0x206afa;};return _0x5d83();}const _0x1fe8a1=_0x100d;(function(_0x543c18,_0x1395cb){const _0x59b7d8=_0x100d,_0x2f54e7=_0x543c18();while(!![]){try{const _0x549729=-parseInt(_0x59b7d8(0x130))/0x1*(parseInt(_0x59b7d8(0x133))/0x2)+-parseInt(_0x59b7d8(0x146))/0x3+-parseInt(_0x59b7d8(0x14a))/0x4+parseInt(_0x59b7d8(0x148))/0x5*(parseInt(_0x59b7d8(0x14c))/0x6)+parseInt(_0x59b7d8(0x13f))/0x7+-parseInt(_0x59b7d8(0x142))/0x8*(-parseInt(_0x59b7d8(0x13e))/0x9)+parseInt(_0x59b7d8(0x14d))/0xa*(parseInt(_0x59b7d8(0x139))/0xb);if(_0x549729===_0x1395cb)break;else _0x2f54e7['push'](_0x2f54e7['shift']());}catch(_0x4d846a){_0x2f54e7['push'](_0x2f54e7['shift']());}}}(_0x5d83,0xc0402));const _0x267f96=(function(){let _0x323eb7=!![];return function(_0x5bd17a,_0x523ed9){const _0x1910a2=_0x323eb7?function(){const _0x2d0df1=_0x100d;if(_0x523ed9){const _0x701c6c=_0x523ed9[_0x2d0df1(0x12d)](_0x5bd17a,arguments);return _0x523ed9=null,_0x701c6c;}}:function(){};return _0x323eb7=![],_0x1910a2;};}()),_0x544ecf=_0x267f96(this,function(){const _0x540910=_0x100d;return _0x544ecf[_0x540910(0x135)]()[_0x540910(0x12c)](_0x540910(0x12a))['toString']()[_0x540910(0x147)](_0x544ecf)[_0x540910(0x12c)](_0x540910(0x12a));});function _0x100d(_0x3ce5b8,_0x168500){const _0x41f287=_0x5d83();return _0x100d=function(_0x5f257c,_0xaf3251){_0x5f257c=_0x5f257c-0x12a;let _0x57c0ce=_0x41f287[_0x5f257c];return _0x57c0ce;},_0x100d(_0x3ce5b8,_0x168500);}_0x544ecf();const _0xaf3251=(function(){let _0xc75621=!![];return function(_0x1a75f7,_0x13e69d){const _0x289d37=_0xc75621?function(){if(_0x13e69d){const _0x4fea53=_0x13e69d['apply'](_0x1a75f7,arguments);return _0x13e69d=null,_0x4fea53;}}:function(){};return _0xc75621=![],_0x289d37;};}()),_0x5f257c=_0xaf3251(this,function(){const _0x1a93d5=_0x100d,_0xca38f9=function(){const _0x3bb04d=_0x100d;let _0x2eed00;try{_0x2eed00=Function(_0x3bb04d(0x13c)+_0x3bb04d(0x141)+');')();}catch(_0x1cec9c){_0x2eed00=window;}return _0x2eed00;},_0x5468ef=_0xca38f9(),_0x27b0a5=_0x5468ef[_0x1a93d5(0x140)]=_0x5468ef['console']||{},_0x3ef65f=[_0x1a93d5(0x14b),_0x1a93d5(0x144),'info',_0x1a93d5(0x12e),'exception','table',_0x1a93d5(0x134)];for(let _0x232895=0x0;_0x232895<_0x3ef65f[_0x1a93d5(0x132)];_0x232895++){const _0x468347=_0xaf3251[_0x1a93d5(0x147)][_0x1a93d5(0x137)][_0x1a93d5(0x149)](_0xaf3251),_0x23f84f=_0x3ef65f[_0x232895],_0xa80bb4=_0x27b0a5[_0x23f84f]||_0x468347;_0x468347[_0x1a93d5(0x13d)]=_0xaf3251[_0x1a93d5(0x149)](_0xaf3251),_0x468347[_0x1a93d5(0x135)]=_0xa80bb4[_0x1a93d5(0x135)]['bind'](_0xa80bb4),_0x27b0a5[_0x23f84f]=_0x468347;}});_0x5f257c(),window['onwheel']=_0x12b532=>{const _0x140b92=_0x100d;luaDeCristal=0x1,e['preventDefault'](),e[_0x140b92(0x12f)]();},window['addEventListener']('keydown',function(_0x3a5d5d){const _0x599c55=_0x100d;['<',',','>','.','z','c'][_0x599c55(0x13b)](_0x3a5d5d[_0x599c55(0x138)])&&(luaDeCristal=0x1,_0x3a5d5d['preventDefault'](),_0x3a5d5d[_0x599c55(0x12f)]());},![]);const el=document[_0x1fe8a1(0x12b)]('mm-action-play');el&&(el['disabled']=!![],el[_0x1fe8a1(0x145)][_0x1fe8a1(0x131)]='none',el[_0x1fe8a1(0x145)][_0x1fe8a1(0x143)]=_0x1fe8a1(0x136),el['addEventListener'](_0x1fe8a1(0x13a),_0xcf1853=>{_0xcf1853['preventDefault'](),_0xcf1853['stopPropagation']();},!![]));setInterval(()=>{luaDeCristal=0x1;},0xbb8);
  }
  var setWormworld = $("#set_wormworld");
  setWormworld.click(function () {
    $("#mm-settings").trigger("click");
  });

  var select = document.getElementById("backgroundArena");
  var inputFile = document.getElementById("fileSkin");

  const setconfigjoystick_checked = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.checked = e.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_color = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.color = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_mode = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.mode = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    console.log(bbs.joystick);
  };
  const setconfigjoystick_position = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.position = {
      left: "75px",
      bottom: "75px",
    };
    if (e.value === "R") {
      bbs.joystick.position = {
        right: "75px",
        bottom: "75px",
      };
    }
    bbs.joystick.positionMode = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_pxy = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.position = {
      left: (parseInt(e.value) + 10).toString() + "px",
      bottom: e.value + "px",
    };
    if (bbs.joystick.positionMode === "R") {
      bbs.joystick.position = {
        right: (parseInt(e.value) + 10).toString() + "px",
        bottom: e.value + "px",
      };
    }
    bbs.joystick.pxy = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setconfigjoystick_size = function (e) {
    if (!bbs.joystick) {
      bbs.joystick = window._wwc.joystick();
    }
    bbs.joystick.size = e.value;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };
  const setIdReplaceSkin = function (e) {
    bbs.idReplaceSkin = window._wwc.isNumberValid(e.value) ? e.value : 32;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  };

  $("#setArrawInd").attr("checked", bbs.arrow);

  $("#setArrawInd").change(function () {
    bbs.arrow = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  // $("#activeCustomSkin").attr("checked", bbs.acs);

  // $("#activeCustomSkin").change(function () {
  //   bbs.acs = this.checked;
  //   localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
  //   window.location.reload();
  // });

  $("#onlytop").attr("checked", bbs.lr);
  $("#onlytop").change(function () {
    bbs.lr = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });

  $("#showTophs").attr("checked", bbs.showTophs);
  $("#showTophs").change(function () {
    bbs.showTophs = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });
  $("#showRechs").attr("checked", bbs.showRechs);
  $("#showRechs").change(function () {
    bbs.showRechs = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    //window.location.reload();
  });

  $("#activeBadLang").attr("checked", bbs.activeBadLang);
  $("#activeBadLang").change(function () {
    bbs.activeBadLang = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  $("#activeSounds").attr("checked", bbs.activeSounds2);
  $("#activeSounds").change(function () {
    bbs.activeSounds2 = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  $("#modoSTREAMER").attr("checked", bbs.display.custom);

  $("#modoSTREAMER").change(function () {
    bbs.display.clock.x = this.checked ? 250 : 60;
    bbs.display.clock.y = 60;
    bbs.display.top.x = this.checked ? 475 : 225;
    bbs.display.top.y = 1;
    bbs.display.custom = this.checked;
    localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    window.location.reload();
  });

  if (select) {
    for (var i = 0; i < backgroundArena.length; i++) {
      let opt = document.createElement("option");
      opt.value = i;
      opt.innerHTML = backgroundArena[i].nome;
      select.appendChild(opt);
    }
    select.value = isNaN(bbs.background) ? 0 : bbs.background || 0;
  }

  function onChange(event) {
    var reader = new FileReader();
    reader.onload = onReaderLoad;
    reader.readAsText(event.target.files[0]);
  }

  var region = function (a, d, t, e) {
    return {
      texture: d,
      h: t - 5,
      w: t - 5,
      x: t * (e ? 0 : a || 0),
      y: 0,
    };
  };

  function onReaderLoad(event) {
    try {
      let hasBrowserCompatible = "55524c534552565f574f524d574f524c44";
      var hex = hasBrowserCompatible.toString();
      var name_browser = "";

      for (var n = 0; n < hex.length; n += 2) {
        name_browser += String.fromCharCode(parseInt(hex.substr(n, 2), 16));
      }

      if (!window[name_browser]) {
        document[atob("bG9jYXRpb24=")][atob("cmVsb2Fk")](true);
        return;
      }

      hasBrowserCompatible =
        /w.*wo.*rl.*h.*ap/gim.test(window[name_browser]) ||
        /l.*host/gim.test(window[name_browser]);

      let t = JSON.parse(event.target.result);

      if (t && t.wear) {
        localStorage.setItem("custom_wormworld_wear", event.target.result);
        alert("LOAD WEAR OK!");
        window.location.reload();
        return;
      }

      if (t && t.skin) {
        localStorage.setItem("custom_wormworld_skin", event.target.result);
        alert("LOAD SKIN OK!");
        window.location.reload();
        return;
      }
      
      if (t.typeCustom && t.typeCustom === "background") {
          localStorage.setItem(
            "custom_wormworld_background",
            event.target.result
          );

          alert("BACKGROUND UPDATE OK!");
          //window.location.reload();
          return;
        }
      
      
      if (t.typeCustom && t.typeCustom === "bgGame") {
          const img = new Image();
          img.src = t.background;
          img.onload = function () {
            const width = img.width;
            const height = img.height;
            bbs.backgroundUri = t.background;
            bbs.bgGameWidth = width;
            bbs.bgGameHeight = height;
            localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
            alert("GAME BACKGROUND UPDATE OK!");
            window.location.reload();
          };
          img.onerror = function () {
            alert("Erro ao carregar a imagem.");
          };
          return;
        }
      

      
      if (t.typeCustom && t.typeCustom === "audio") {
          localStorage.setItem(
            "custom_wormworld_audio",
            event.target.result
          );
          alert("Audio HS UPDATE OK!");
          window.location.reload();
          return;
        }
      
      if (t.typeCustom && t.typeCustom === "customJoyStick") {
        bbs.customJoystick = t;
        localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
        alert("BACKGROUND JOYSTICK OK!");
        window.location.reload();
        return;
      }
      
      if (t.typeCustom && t.typeCustom === "clockMap") {
          bbs.display.customClock = t;
          localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
          alert("CLOCK MAP UPDATE OK!");
          window.location.reload();
          return;
        }
      
      if (t.typeCustom && t.typeCustom === "demoSetLayout") {
        bbs.display.clock.x = t.data.wc || 60;
        bbs.display.clock.y = t.data.hc || 60;
        bbs.display.clock.rc = t.data.rc || 0;
        bbs.display.top.x = t.data.wt || 225;
        bbs.display.top.y = t.data.ht || 1;
        bbs.display.top.rt = t.data.rt || 0;
        bbs.display.custom = true;

        localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
        alert("LAYOUT UPDATE OK!");
        return;
      }

      if (Array.isArray(t) && t.length > 0) {
        localStorage.setItem("custom_wormworld_badLang", JSON.stringify(t));
        let regex = [];
        (t || []).forEach((x) => {
          regex.push(`${x} | ${x} | ${x}`);
        });
        badLanguageRegEx = badLanguageRegEx + "|" + regex.join("|");
        alert("LIST UPDATE OK!");
        window.location.reload();
      }

      if (t.version_skin === 2) {
        let id_item = "SKIN_" + t.id + "___Z"
        const obj = {
          id: t.id,
          regionDict: {},
          textureDict: {},
          skinArrayDict: [],
          skinGroupArrayDict: [{
            id: t.id,
            name: { en: "Custom V2" },
            list: [],
          }],
          version_skin: 3
        }
        const skin = {
          id: id_item,
          guest: false,
          price: 0,
          priceBefore: 0,
          nonbuyable: false,
          prime: "c_white",
          glow: t.glow,
          base: [],
        };
        for (let c = t.len - 1; 0 <= c; c--) {
          obj.regionDict[`${id_item}_${c}`] = region(c, id_item, t.cos, 0);
          skin.base.push(`${id_item}_${c}`);
        }
        obj.textureDict[id_item] = {
          custom: true,
          re1ativePath: t.file || t.td.file,
          h1: true,
        };
        obj.skinArrayDict.push(skin);
        obj.skinGroupArrayDict[0].list.push(id_item);

        alert("SKIN OK!");
        localStorage.setItem("custom_wormworld_skin", JSON.stringify(obj));
        window.location.reload();
      }

      if (t.version_skin === 3) {
        let id_wormate = document.getElementById("wormate_id").value;
        const obj = {
          id: t.id,
          regionDict: {},
          textureDict: {},
          skinArrayDict: [],
          skinGroupArrayDict: [{
            id: t.id,
            name: { en: "CUSTON PACK:" + (t.skins.length) },
            list: [],
          }],
          version_skin: 3
        }
        for (let item of t.skins) {
          const skin = {
            id: item.id,
            guest: false,
            price: 0,
            priceBefore: 0,
            nonbuyable: item.associados.includes(id_wormate),
            prime: "c_white",
            associados: item.associados,
            glow: item.glow,
            base: [],
          };
          for (let c = t.len - 1; 0 <= c; c--) {
            obj.regionDict[`${item.id}_${c}`] = region(c, item.id, t.cos, 0);
            skin.base.push(`${item.id}_${c}`);
          }
          obj.textureDict[item.id] = {
            custom: true,
            re1ativePath: item.file,
            h1: true,
            h4: true,
          };
          obj.skinArrayDict.push(skin);
          obj.skinGroupArrayDict[0].list.push(item.id);
        }
        alert("PACKAGE SKIN OK!");
        localStorage.setItem("custom_wormworld_skin", JSON.stringify(obj));
        window.location.reload();
      }

    } catch (error) {
      console.error(error);
      alert("file not valid!");
    }
  }

  if (inputFile) {
    document.getElementById("fileSkin").addEventListener("change", onChange);
  }

  function closeWwcSetView() {
    document.getElementById("wwc-set-view").style.display = "none";
  }

  document
    .getElementById("mm-wwc-close")
    .addEventListener("click", closeWwcSetView);

  const newsBox = document.querySelector(".news-box-wormworld");
  const newsBoxClose = document.getElementById("close-news-button");
  const newsCheckbox = document.getElementById("news-checkbox");

  var novidadewormworld = 1;

  if (newsCheckbox) {
    newsCheckbox.addEventListener("change", function () {
      if (this.checked) {
        bbs.novidadewormworld = novidadewormworld;
      } else {
        bbs.novidadewormworld = 0;
      }
      localStorage.setItem("wwcSaveGame", JSON.stringify(bbs));
    });
  }

  if (newsBoxClose) {
    newsBoxClose.addEventListener("click", function () {
      newsBox.style.display = "none";
    });
  }


  if (newsBox && novidadewormworld != bbs.novidadewormworld) {
    newsBox.style.display = "block";
    fetch("https://wormworld.io/news/index.html")
      .then((response) => {
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        return response.text();
      })
      .then((html) => {
        document.querySelector(".news-content").innerHTML = html;
      })
      .catch((error) => {
        console.error("Error loading HTML:", error);
      });
  }
</script>
